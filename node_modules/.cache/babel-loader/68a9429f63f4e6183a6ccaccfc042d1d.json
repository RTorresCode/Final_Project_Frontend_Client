{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/StudentContainer.js\";\n\n/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk, deleteStudentThunk } from \"../../store/thunks\";\nimport { StudentView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StudentContainer extends Component {\n  constructor(props) {\n    // initialize state\n    super(props);\n    this.state = {\n      studRedirect: false\n    };\n  } // Get student data from back-end database\n\n\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  } // Render Student view by passing student data as props to the corresponding View component\n\n\n  render() {\n    if (!this.props.student) {\n      // If student doesn't exist\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Student not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this) // Return this so that /students/<random-id> doesn't crash  \n      ;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StudentView, {\n        student: this.props.student,\n        toggleEdit: this.toggleEdit,\n        editing: this.state.editor,\n        deleteStudent: this.props.deleteStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), this.state.editor ? /*#__PURE__*/_jsxDEV(EditStudentContainer, {\n        student: this.props.student\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : null // do nothing\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  return {\n    student: state.student // Get the State object from Reducer \"student\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    deleteStudent: id => dispatch(deleteStudentThunk(id))\n  };\n}; // Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(StudentContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/StudentContainer.js"],"names":["Header","React","Component","Redirect","connect","fetchStudentThunk","deleteStudentThunk","StudentView","StudentContainer","constructor","props","state","studRedirect","componentDidMount","fetchStudent","match","params","id","render","student","toggleEdit","editor","deleteStudent","mapState","mapDispatch","dispatch"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,EACSC,kBADT,QACoC,oBADpC;AAEA,SAASC,WAAT,QAA4B,UAA5B;;;AAGA,MAAMC,gBAAN,SAA+BN,SAA/B,CAAyC;AACvCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAE;AACnB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AADH,KAAb;AAGD,GANsC,CAOvC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKH,KAAL,CAAWI,YAAX,CAAwB,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhD;AACD,GAXsC,CAcvC;;;AACAC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKR,KAAL,CAAWS,OAAhB,EAAyB;AAAE;AACzB,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAC8B;AAD9B;AAGD;;AACD,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AACA,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWS,OADpB;AAEA,QAAA,UAAU,EAAE,KAAKC,UAFjB;AAGA,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,MAHpB;AAIA,QAAA,aAAa,EAAE,KAAKX,KAAL,CAAWY;AAJ1B;AAAA;AAAA;AAAA;AAAA,cAFF,EAQG,KAAKX,KAAL,CAAWU,MAAX,gBACC,QAAC,oBAAD;AAAsB,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWS;AAA1C;AAAA;AAAA;AAAA;AAAA,cADD,GAGC,IAHD,CAGM;AAXT;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AArCsC,C,CAwCzC;AACA;;;AACA,MAAMI,QAAQ,GAAIZ,KAAD,IAAW;AAC1B,SAAO;AACLQ,IAAAA,OAAO,EAAER,KAAK,CAACQ,OADV,CACoB;;AADpB,GAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLX,IAAAA,YAAY,EAAGG,EAAD,IAAQQ,QAAQ,CAACpB,iBAAiB,CAACY,EAAD,CAAlB,CADzB;AAELK,IAAAA,aAAa,EAAGL,EAAD,IAAQQ,QAAQ,CAACnB,kBAAkB,CAACW,EAAD,CAAnB;AAF1B,GAAP;AAID,CALD,C,CAOA;AACA;AACA;;;AACA,eAAeb,OAAO,CAACmB,QAAD,EAAWC,WAAX,CAAP,CAA+BhB,gBAA/B,CAAf","sourcesContent":["/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk , \n         deleteStudentThunk  } from \"../../store/thunks\";\nimport { StudentView } from \"../views\";\n\n\nclass StudentContainer extends Component {\n  constructor(props) { // initialize state\n    super(props); \n    this.state = {\n      studRedirect: false,\n    }\n  }\n  // Get student data from back-end database\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n  \n  \n  // Render Student view by passing student data as props to the corresponding View component\n  render() {\n    if (!this.props.student) { // If student doesn't exist\n      return (\n        <h1>Student not found!</h1> // Return this so that /students/<random-id> doesn't crash  \n      ); \n    }\n    return (\n      <div>\n        <Header />\n        <StudentView \n        student={this.props.student} \n        toggleEdit={this.toggleEdit}\n        editing={this.state.editor} \n        deleteStudent={this.props.deleteStudent}\n        />\n        {this.state.editor ? (\n          <EditStudentContainer student={this.props.student}/>\n        ) : (\n          null // do nothing\n        )}\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n  return {\n    student: state.student,  // Get the State object from Reducer \"student\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n    deleteStudent: (id) => dispatch(deleteStudentThunk(id))\n  };\n};\n\n// Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(StudentContainer);"]},"metadata":{},"sourceType":"module"}