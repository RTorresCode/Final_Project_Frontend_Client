{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client2/src/components/containers/NewStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n        imageUrl: this.state.imageUrl\n      };\n\n      if (student.imageUrl === \"\") {\n        delete student.imageUrl;\n      } // Add new student in back-end database\n\n\n      await this.props.addStudent(student).then(newStudent => {\n        console.log(newStudent); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          campusId: null,\n          redirect: true,\n          gpa: this.state.gpa,\n          imageUrl: \"\",\n          redirectId: newStudent.id\n        });\n      }).catch(err => {\n        // If errors doing the above, then: \n        console.error(err); // Output error and give alert to new information at bottom of page\n\n        alert(\"Error with add! Please follow the Student Information guidelines found at the bottom of the page\");\n        this.setState({\n          errorCaught: true // Tell react to render new thing\n\n        });\n      });\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      campusId: null,\n      redirect: false,\n      imageUrl: \"\",\n      gpa: null,\n      errorCaught: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), this.state.errorCaught ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student First and Last names: Cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student's Campus ID: Must be a valid  and actual campus ID of a school within this database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student Email: Must contain @ symbol, and be in standard email format, cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student Image: Should be a valid image link, or can be left blank.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student GPA: Must be between 0.0 and 4.0.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client2/src/components/containers/NewStudentContainer.js"],"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","email","campusId","gpa","imageUrl","addStudent","then","newStudent","console","log","redirect","redirectId","id","catch","err","error","alert","errorCaught","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      email: \"\",\n      campusId: null, \n      redirect: false, \n      imageUrl: \"\",\n      gpa: null,\n      errorCaught: false,\n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n        imageUrl: this.state.imageUrl,\n    };\n    if (student.imageUrl === \"\") { \n      delete student.imageUrl; \n    }\n\n\n    // Add new student in back-end database\n    await this.props.addStudent(student)\n      .then(newStudent => {\n        console.log(newStudent);\n    // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\", \n        lastname: \"\",\n        email: \"\",\n        campusId: null, \n        redirect: true, \n        gpa: this.state.gpa,\n        imageUrl: \"\",\n        redirectId: newStudent.id\n      });\n    })\n    .catch(err => { // If errors doing the above, then: \n      console.error(err); // Output error and give alert to new information at bottom of page\n      alert(\"Error with add! Please follow the Student Information guidelines found at the bottom of the page\");\n      this.setState({\n        errorCaught: true // Tell react to render new thing\n      });\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n        {this.state.errorCaught ? (\n          <div>\n            <br />\n            <p>Student First and Last names: Cannot be null.</p>\n            <p>Student's Campus ID: Must be a valid  and actual campus ID of a school within this database.</p>\n            <p>Student Email: Must contain @ symbol, and be in standard email format, cannot be null.</p>\n            <p>Student Image: Should be a valid image link, or can be left blank.</p>\n            <p>Student GPA: Must be between 0.0 and 4.0.</p>\n          </div>\n        ) : (\n          null\n        )}\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"]},"metadata":{},"sourceType":"module"}