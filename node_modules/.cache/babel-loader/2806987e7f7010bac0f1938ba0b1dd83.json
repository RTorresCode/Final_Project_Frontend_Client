{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\AllStudentsContainer.js\";\n\n/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllStudentsThunk, deleteStudentThunk } from '../../store/thunks';\nimport AllStudentsView from '../views/AllStudentsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllStudentsContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleEdit = () => {\n      let new_editor = !this.state.editor;\n      this.setState({\n        editor: new_editor\n      });\n    };\n\n    this.state = {\n      editor: false\n    };\n  } // Get all students data from back-end database\n\n\n  componentDidMount() {\n    this.props.fetchAllStudents();\n  }\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllStudentsView, {\n        students: this.props.allStudents,\n        deleteStudent: this.props.deleteStudent,\n        toggleEdit: this.toggleEdit,\n        editing: this.state.editor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\n\n\nconst mapState = state => {\n  return {\n    allStudents: state.allStudents // Get the State object from Reducer \"allStudents\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId))\n  };\n}; // Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["Header","Component","connect","withRouter","fetchAllStudentsThunk","deleteStudentThunk","AllStudentsView","AllStudentsContainer","constructor","props","toggleEdit","new_editor","state","editor","setState","componentDidMount","fetchAllStudents","render","allStudents","deleteStudent","mapState","mapDispatch","dispatch","studentId"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { \r\n  fetchAllStudentsThunk,\r\n  deleteStudentThunk\r\n} from '../../store/thunks';\r\n\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nclass AllStudentsContainer extends Component {\r\n  constructor(props) { \r\n    super(props); \r\n    this.state = {\r\n        editor: false,\r\n    }\r\n  }\r\n  // Get all students data from back-end database\r\n  componentDidMount() {\r\n    this.props.fetchAllStudents();\r\n  }\r\n\r\n  toggleEdit = () => {\r\n    let new_editor = !this.state.editor;\r\n    this.setState({\r\n      editor: new_editor \r\n    });\r\n  }\r\n\r\n\r\n  // Render All Students view by passing all students data as props to the corresponding View component\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <AllStudentsView \r\n          students={this.props.allStudents}\r\n          deleteStudent={this.props.deleteStudent}   \r\n          toggleEdit={this.toggleEdit}\r\n          editing={this.state.editor}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\r\nconst mapState = (state) => {\r\n  return {\r\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\r\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SACEC,qBADF,EAEEC,kBAFF,QAGO,oBAHP;AAKA,OAAOC,eAAP,MAA4B,0BAA5B;;;AAEA,MAAMC,oBAAN,SAAmCN,SAAnC,CAA6C;EAC3CO,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAWnBC,UAXmB,GAWN,MAAM;MACjB,IAAIC,UAAU,GAAG,CAAC,KAAKC,KAAL,CAAWC,MAA7B;MACA,KAAKC,QAAL,CAAc;QACZD,MAAM,EAAEF;MADI,CAAd;IAGD,CAhBkB;;IAEjB,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE;IADC,CAAb;EAGD,CAN0C,CAO3C;;;EACAE,iBAAiB,GAAG;IAClB,KAAKN,KAAL,CAAWO,gBAAX;EACD;;EAUD;EACAC,MAAM,GAAE;IACN,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,eAAD;QACE,QAAQ,EAAE,KAAKR,KAAL,CAAWS,WADvB;QAEE,aAAa,EAAE,KAAKT,KAAL,CAAWU,aAF5B;QAGE,UAAU,EAAE,KAAKT,UAHnB;QAIE,OAAO,EAAE,KAAKE,KAAL,CAAWC;MAJtB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAWD;;AAjC0C,C,CAoC7C;AACA;AACA;;;AACA,MAAMO,QAAQ,GAAIR,KAAD,IAAW;EAC1B,OAAO;IACLM,WAAW,EAAEN,KAAK,CAACM,WADd,CAC4B;;EAD5B,CAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMG,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLN,gBAAgB,EAAE,MAAMM,QAAQ,CAAClB,qBAAqB,EAAtB,CAD3B;IAELe,aAAa,EAAGI,SAAD,IAAeD,QAAQ,CAACjB,kBAAkB,CAACkB,SAAD,CAAnB;EAFjC,CAAP;AAID,CALD,C,CAOA;AACA;AACA;;;AACA,eAAepB,UAAU,CAACD,OAAO,CAACkB,QAAD,EAAWC,WAAX,CAAP,CAA+Bd,oBAA/B,CAAD,CAAzB"},"metadata":{},"sourceType":"module"}