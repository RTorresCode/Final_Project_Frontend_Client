{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\StudentContainer.js\";\n\n/*==================================================\r\nStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk, deleteStudentThunk } from \"../../store/thunks\";\nimport { StudentView } from \"../views\";\nimport { EditStudentContainer } from \"./index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StudentContainer extends Component {\n  constructor(props) {\n    // initialize state\n    super(props);\n\n    this.toggleEdit = () => {\n      let new_editor = !this.state.editor;\n      this.setState({\n        editor: new_editor\n      });\n    };\n\n    this.state = {\n      editor: false\n    };\n  } // Get student data from back-end database\n\n\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  // Render Student view by passing student data as props to the corresponding View component\n  render() {\n    if (!this.props.student) {\n      // If student doesn't exist\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Student not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this) // Return this so that /students/<random-id> doesn't crash  \n      ;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StudentView, {\n        student: this.props.student,\n        toggleEdit: this.toggleEdit,\n        editing: this.state.editor,\n        deleteStudent: this.props.deleteStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), this.state.editor ? /*#__PURE__*/_jsxDEV(EditStudentContainer, {\n        student: this.props.student\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : null // do nothing\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  console.log(state);\n  return {\n    student: state.student // Get the State object from Reducer \"student\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    deleteStudent: id => dispatch(deleteStudentThunk(id))\n  };\n}; // Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(StudentContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchStudentThunk","deleteStudentThunk","StudentView","EditStudentContainer","StudentContainer","constructor","props","toggleEdit","new_editor","state","editor","setState","componentDidMount","fetchStudent","match","params","id","render","student","deleteStudent","mapState","console","log","mapDispatch","dispatch"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/StudentContainer.js"],"sourcesContent":["/*==================================================\r\nStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStudentThunk , \r\n         deleteStudentThunk  } from \"../../store/thunks\";\r\nimport { StudentView } from \"../views\";\r\nimport { EditStudentContainer } from \"./index\"\r\n\r\nclass StudentContainer extends Component {\r\n  constructor(props) { // initialize state\r\n    super(props); \r\n    this.state = {\r\n        editor: false,\r\n    }\r\n  }\r\n  // Get student data from back-end database\r\n  componentDidMount() {\r\n    //getting student ID from url\r\n    this.props.fetchStudent(this.props.match.params.id);\r\n  }\r\n  \r\n  toggleEdit = () => {\r\n    let new_editor = !this.state.editor;\r\n    this.setState({\r\n      editor: new_editor \r\n    });\r\n  }\r\n  // Render Student view by passing student data as props to the corresponding View component\r\n  render() {\r\n    if (!this.props.student) { // If student doesn't exist\r\n      return (\r\n        <h1>Student not found!</h1> // Return this so that /students/<random-id> doesn't crash  \r\n      ); \r\n    }\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <StudentView \r\n        student={this.props.student} \r\n        toggleEdit={this.toggleEdit}\r\n        editing={this.state.editor} \r\n        deleteStudent={this.props.deleteStudent}\r\n        />\r\n        {this.state.editor ? (\r\n          <EditStudentContainer student={this.props.student}/>\r\n        ) : (\r\n          null // do nothing\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n    console.log(state);\r\n  return {\r\n    student: state.student,  // Get the State object from Reducer \"student\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n    deleteStudent: (id) => dispatch(deleteStudentThunk(id))\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(StudentContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,EACSC,kBADT,QACoC,oBADpC;AAEA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,oBAAT,QAAqC,SAArC;;;AAEA,MAAMC,gBAAN,SAA+BN,SAA/B,CAAyC;EACvCO,WAAW,CAACC,KAAD,EAAQ;IAAE;IACnB,MAAMA,KAAN;;IADiB,KAYnBC,UAZmB,GAYN,MAAM;MACjB,IAAIC,UAAU,GAAG,CAAC,KAAKC,KAAL,CAAWC,MAA7B;MACA,KAAKC,QAAL,CAAc;QACZD,MAAM,EAAEF;MADI,CAAd;IAGD,CAjBkB;;IAEjB,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE;IADC,CAAb;EAGD,CANsC,CAOvC;;;EACAE,iBAAiB,GAAG;IAClB;IACA,KAAKN,KAAL,CAAWO,YAAX,CAAwB,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhD;EACD;;EAQD;EACAC,MAAM,GAAG;IACP,IAAI,CAAC,KAAKX,KAAL,CAAWY,OAAhB,EAAyB;MAAE;MACzB,oBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,CAC8B;MAD9B;IAGD;;IACD,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,WAAD;QACA,OAAO,EAAE,KAAKZ,KAAL,CAAWY,OADpB;QAEA,UAAU,EAAE,KAAKX,UAFjB;QAGA,OAAO,EAAE,KAAKE,KAAL,CAAWC,MAHpB;QAIA,aAAa,EAAE,KAAKJ,KAAL,CAAWa;MAJ1B;QAAA;QAAA;QAAA;MAAA,QAFF,EAQG,KAAKV,KAAL,CAAWC,MAAX,gBACC,QAAC,oBAAD;QAAsB,OAAO,EAAE,KAAKJ,KAAL,CAAWY;MAA1C;QAAA;QAAA;QAAA;MAAA,QADD,GAGC,IAHD,CAGM;MAXT;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAgBD;;AA1CsC,C,CA6CzC;AACA;;;AACA,MAAME,QAAQ,GAAIX,KAAD,IAAW;EACxBY,OAAO,CAACC,GAAR,CAAYb,KAAZ;EACF,OAAO;IACLS,OAAO,EAAET,KAAK,CAACS,OADV,CACoB;;EADpB,CAAP;AAGD,CALD,C,CAMA;AACA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLX,YAAY,EAAGG,EAAD,IAAQQ,QAAQ,CAACxB,iBAAiB,CAACgB,EAAD,CAAlB,CADzB;IAELG,aAAa,EAAGH,EAAD,IAAQQ,QAAQ,CAACvB,kBAAkB,CAACe,EAAD,CAAnB;EAF1B,CAAP;AAID,CALD,C,CAOA;AACA;AACA;;;AACA,eAAejB,OAAO,CAACqB,QAAD,EAAWG,WAAX,CAAP,CAA+BnB,gBAA/B,CAAf"},"metadata":{},"sourceType":"module"}