{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/EditCampusContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk } from '../../store/thunks';\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        //imageUrl: this.state.imageUrl,\n        id: this.props.campus.id //id or campusID\n\n      };\n      console.log(\"campus: \");\n      console.log(campus);\n      console.log(\"this.props.campus: \");\n      console.log(this.props.campus);\n      let newCampus = await this.props.editCampus(campus);\n      console.log(\"newCampus: \");\n      console.log(newCampus);\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        //imageUrl: 0,\n        redirect: true,\n        redirectId: this.props.campus.id\n      });\n    };\n\n    this.state = {\n      name: this.props.campus.name,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      //imageUrl: this.props.campus.imageUrl,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    //getting campus ID from url\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(EditCampusView, {\n      campus: this.props.campus,\n      editCampus: this.props.editCampus,\n      deleteCampus: this.props.deleteCampus,\n      fetchCampus: this.props.fetchCampus,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n};\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/EditCampusContainer.js"],"names":["Header","Component","connect","Redirect","EditCampusView","editCampusThunk","fetchCampusThunk","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","id","console","log","newCampus","editCampus","redirect","redirectId","componentDidMount","fetchCampus","match","params","componentWillUnmount","render","deleteCampus","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["import Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk } from '../../store/thunks';\nimport { fetchCampusThunk } from \"../../store/thunks\";\n\nclass EditCampusContainer extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n          name: this.props.campus.name, \n          address: this.props.campus.address, \n          description: this.props.campus.description,\n          //imageUrl: this.props.campus.imageUrl,\n          redirect: false, \n          redirectId: null\n        };\n    }\n\n    componentDidMount() {\n        //getting campus ID from url\n        this.props.fetchCampus(this.props.match.params.id);\n      }\n    handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    }\n  \n    handleSubmit = async event => {\n        event.preventDefault();\n\n        let campus = {\n            name: this.state.name,\n            address: this.state.address,\n            description: this.state.description,\n            //imageUrl: this.state.imageUrl,\n            id: this.props.campus.id //id or campusID\n        };\n\n        console.log(\"campus: \")\n        console.log(campus)\n\n        console.log(\"this.props.campus: \")\n        console.log(this.props.campus)\n\n        let newCampus = await this.props.editCampus(campus);\n\n        console.log(\"newCampus: \")\n        console.log(newCampus)\n\n        this.setState({\n            name: \"\", \n            address: \"\", \n            description: \"\",\n            //imageUrl: 0,\n            redirect: true, \n            redirectId: this.props.campus.id\n          });\n      }\n  \n      componentWillUnmount() {\n          this.setState({redirect: false, redirectId: null});\n      }\n\n      render() {\n\n        if(this.state.redirect) {\n          return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n        }\n        return (\n            \n            <EditCampusView \n            campus={this.props.campus}\n            editCampus={this.props.editCampus}\n            deleteCampus={this.props.deleteCampus}\n            fetchCampus={this.props.fetchCampus}\n            handleChange = {this.handleChange} \n            handleSubmit={this.handleSubmit}      \n          />\n        );\n    }\n}\n\nconst mapState = (state) => {\n    return {\n      campus: state.campus,\n    };\n  };\n\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n        editCampus: (campus) => dispatch(editCampusThunk(campus))\n    })\n}\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);\n\n  \n\n\n"]},"metadata":{},"sourceType":"module"}