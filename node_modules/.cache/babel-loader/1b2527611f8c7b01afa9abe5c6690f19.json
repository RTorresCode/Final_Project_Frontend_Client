{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/AllCampusesContainer.js\";\n\n/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n    window.scrollTo(0, 0);\n  } // Render All Campuses view by passing all campuses data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus,\n        toggleEdit: this.toggleEdit,\n        editing: this.state.editor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n}; // Type check props;\n\n\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n}; // Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/AllCampusesContainer.js"],"names":["Header","Component","PropTypes","connect","withRouter","fetchAllCampusesThunk","deleteCampusThunk","AllCampusesView","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","window","scrollTo","render","allCampuses","deleteCampus","toggleEdit","state","editor","mapState","mapDispatch","dispatch","campusId","propTypes","array","isRequired","func"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,oBAAzD;AACA,SAASC,eAAT,QAAgC,UAAhC;;;AAEA,MAAMC,oBAAN,SAAmCP,SAAnC,CAA6C;AAE3C;AACAQ,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,SAAKA,KAAL,CAAWC,gBAAX;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAkB,CAAlB;AACD,GAP0C,CAS3C;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AACE,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWK,WAD1B;AAEE,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWM,YAF3B;AAGE,QAAA,UAAU,EAAE,KAAKC,UAHnB;AAIE,QAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC;AAJtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAtB0C,C,CAyB7C;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIF,KAAD,IAAW;AAC1B,SAAO;AACLH,IAAAA,WAAW,EAAEG,KAAK,CAACH,WADd,CAC4B;;AAD5B,GAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMM,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLX,IAAAA,gBAAgB,EAAE,MAAMW,QAAQ,CAACnB,qBAAqB,EAAtB,CAD3B;AAELa,IAAAA,YAAY,EAAGO,QAAD,IAAcD,QAAQ,CAAClB,iBAAiB,CAACmB,QAAD,CAAlB;AAF/B,GAAP;AAID,CALD,C,CAOA;;;AACAjB,oBAAoB,CAACkB,SAArB,GAAiC;AAC/BT,EAAAA,WAAW,EAAEf,SAAS,CAACyB,KAAV,CAAgBC,UADE;AAE/Bf,EAAAA,gBAAgB,EAAEX,SAAS,CAAC2B,IAAV,CAAeD;AAFF,CAAjC,C,CAKA;AACA;AACA;;AACA,eAAezB,OAAO,CAACmB,QAAD,EAAWC,WAAX,CAAP,CAA+Bf,oBAA/B,CAAf","sourcesContent":["/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\n\nclass AllCampusesContainer extends Component {\n  \n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n    window.scrollTo(0,0);\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <AllCampusesView\n          allCampuses={this.props.allCampuses}\n          deleteCampus={this.props.deleteCampus}\n          toggleEdit={this.toggleEdit}\n          editing={this.state.editor}\n        />\n      </div>\n    );\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n  return {\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\n  };\n};  \n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);"]},"metadata":{},"sourceType":"module"}