{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk } from '../../store/thunks';\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { editStudentThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInit = async campusId => {\n      await this.props.fetchCampus(campusId);\n      this.setState({\n        name: this.props.campus.name,\n        description: this.props.campus.description,\n        address: this.props.campus.address,\n        imageUrl: this.props.campus.imageUrl,\n        students: this.props.campus.students,\n        redirectId: this.props.campus.id\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(\"changes have been made\");\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let campus = {\n        name: this.state.name,\n        description: this.state.description,\n        address: this.state.address,\n        imageUrl: this.state.imageUrl,\n        id: this.state.redirectId\n      };\n\n      if (this.state.removedStudents) {\n        for (let i of this.state.removedStudents) {\n          const newStudent = i;\n          newStudent.campusId = null;\n          this.props.editStudent(newStudent);\n        }\n      }\n\n      await this.props.editCampus(campus); // Update student in back-end database\n\n      this.setState({\n        // Update state, and trigger redirect to show the edited campus\n        name: '',\n        address: '',\n        imageUrl: '',\n        description: '',\n        redirect: true\n      });\n    };\n\n    this.handleStudentRemove = async (event, studentId) => {\n      event.preventDefault();\n      let currStudents = this.state.students;\n      let removedStudentArr = this.state.removedStudents ? this.state.removedStudents : [];\n      const removedStudent = currStudents.filter(student => student.id === studentId);\n      currStudents = currStudents.filter(student => student.id !== studentId);\n      removedStudentArr.push(removedStudent[0]);\n      this.setState({\n        message: \"Hit the submit button to save campus changes to database\",\n        students: currStudents,\n        removedStudents: removedStudentArr\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      description: \"\",\n      address: \"\",\n      imageUrl: null,\n      students: null,\n      removedStudents: null,\n      message: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    //getting campus ID from url\n    this.handleInit(this.props.match.params.id);\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render edit campus input form\n\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campuses/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        campus: this.state,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        handleStudentRemove: this.handleStudentRemove,\n        message: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","EditCampusView","editCampusThunk","fetchCampusThunk","editStudentThunk","EditCampusContainer","constructor","props","handleInit","campusId","fetchCampus","setState","name","campus","description","address","imageUrl","students","redirectId","id","handleChange","event","target","value","console","log","handleSubmit","preventDefault","state","removedStudents","i","newStudent","editStudent","editCampus","redirect","handleStudentRemove","studentId","currStudents","removedStudentArr","removedStudent","filter","student","push","message","componentDidMount","match","params","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/EditCampusContainer.js"],"sourcesContent":["import Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport EditCampusView from '../views/EditCampusView';\r\nimport { editCampusThunk } from '../../store/thunks';\r\nimport { fetchCampusThunk } from \"../../store/thunks\";\r\nimport { editStudentThunk } from \"../../store/thunks\";\r\n\r\n\r\nclass EditCampusContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            description: \"\",\r\n            address: \"\",\r\n            imageUrl: null,\r\n            students: null,\r\n            removedStudents: null,\r\n            message: null,\r\n            redirect: false,\r\n            redirectId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() { //getting campus ID from url\r\n        this.handleInit(this.props.match.params.id);\r\n    }\r\n\r\n    handleInit = async campusId => {\r\n        await this.props.fetchCampus(campusId);\r\n        this.setState({\r\n            name: this.props.campus.name,\r\n            description: this.props.campus.description,\r\n            address: this.props.campus.address,\r\n            imageUrl: this.props.campus.imageUrl,\r\n            students: this.props.campus.students,\r\n            redirectId: this.props.campus.id\r\n        });\r\n    }\r\n    // Capture input data when it is entered\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n        console.log(\"changes have been made\");\r\n    }\r\n\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        let campus = {\r\n            name: this.state.name,\r\n            description: this.state.description,\r\n            address: this.state.address,\r\n            imageUrl: this.state.imageUrl,\r\n            id: this.state.redirectId\r\n        };\r\n\r\n        if (this.state.removedStudents) {\r\n            for (let i of this.state.removedStudents) {\r\n                const newStudent = i;\r\n                newStudent.campusId = null;\r\n                this.props.editStudent(newStudent);\r\n            }\r\n        }\r\n        await this.props.editCampus(campus); // Update student in back-end database\r\n        this.setState({  // Update state, and trigger redirect to show the edited campus\r\n            name: '',\r\n            address: '',\r\n            imageUrl: '',\r\n            description: '',\r\n            redirect: true\r\n        });\r\n    }\r\n\r\n    handleStudentRemove = async (event, studentId) => {\r\n        event.preventDefault();\r\n        let currStudents = this.state.students;\r\n        let removedStudentArr = this.state.removedStudents ? this.state.removedStudents : [];\r\n        const removedStudent = currStudents.filter(student => student.id === studentId);\r\n        currStudents = currStudents.filter(student => student.id !== studentId);\r\n        removedStudentArr.push(removedStudent[0]);\r\n        this.setState({\r\n            message: \"Hit the submit button to save campus changes to database\",\r\n            students: currStudents,\r\n            removedStudents: removedStudentArr\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setState({ redirect: false, redirectId: null });\r\n    }\r\n    // Render edit campus input form\r\n    render() {\r\n        if (this.state.redirect) {\r\n            return (<Redirect to={`/campuses/${this.state.redirectId}`} />)\r\n        }\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <EditCampusView campus={this.state}\r\n                    handleChange={this.handleChange}\r\n                    handleSubmit={this.handleSubmit}\r\n                    handleStudentRemove={this.handleStudentRemove}\r\n                    message={this.state.message}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        campus: state.campus,\r\n\r\n    };\r\n};\r\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return ({\r\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n        editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n        editStudent: (student) => dispatch(editStudentThunk(student))\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\n\r\nexport default connect(mapState, mapDispatch)(EditCampusContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}