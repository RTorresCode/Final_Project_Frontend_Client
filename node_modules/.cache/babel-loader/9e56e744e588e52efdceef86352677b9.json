{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/EditCampusContainer.js\";\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = event.target;\n      type === \"checkbox\" ? this.setState({\n        [name]: checked\n      }) : this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let new_info = {\n        name: this.state.name,\n        description: this.state.description,\n        address: this.state.address,\n        imageUrl: this.state.imageUrl,\n        id: this.state.id\n      };\n\n      if (new_info.imageUrl === \"\") {\n        delete new_info.imageUrl;\n      }\n\n      try {\n        let campus = await this.props.editCampus(new_info);\n        console.log(campus.id); // Will catch this error if editCampus failed. \n\n        alert(`${new_info.name}'s edit was saved.`); // Tell user\n        // Update state, and trigger redirect to show the new campus\n\n        this.setState({\n          name: \"\",\n          address: \"\",\n          description: \"\",\n          imageUrl: \"\",\n          redirect: true,\n          id: -1\n        });\n      } catch (err) {\n        console.error(err);\n        alert(\"Error with edit! Please follow the Campus Information guidelines found below\");\n        this.setState({\n          errorCaught: true\n        });\n      }\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      id: -1,\n      redirect: false,\n      errorCaught: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      name: this.props.campus.name,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      imageUrl: this.props.campus.imageUrl,\n      id: this.props.campus.id\n    });\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  render() {\n    if (this.state.redirect) {\n      window.location.reload();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), this.state.errorCaught ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Campus name:Cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Campus address: Cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Campus Image: Should be a valid image link, or can be left blank.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Campus Description: No restraints, and can be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n};\n\nexport default connect(null, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/EditCampusContainer.js"],"names":["Component","connect","EditCampusView","editCampusThunk","EditCampusContainer","constructor","props","handleChange","event","name","value","type","checked","target","setState","handleSubmit","preventDefault","new_info","state","description","address","imageUrl","id","campus","editCampus","console","log","alert","redirect","err","error","errorCaught","componentDidMount","componentWillUnmount","redirectId","render","window","location","reload","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk } from '../../store/thunks';\n\n\nclass EditCampusContainer extends Component {\n  constructor(props) { \n    super(props); \n    this.state = {\n        name: \"\", \n        address: \"\",\n        description: \"\",\n        imageUrl: \"\",\n        id: -1,\n        redirect: false, \n        errorCaught: false,\n    }\n  }\n\n  componentDidMount() {\n    this.setState({name: this.props.campus.name, \n        address: this.props.campus.address,\n        description: this.props.campus.description,\n        imageUrl: this.props.campus.imageUrl,\n        id: this.props.campus.id});  \n  }\n\n\n    handleChange = event => {\n      const {name, value, type, checked} = event.target\n      type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n    }\n  \n    handleSubmit = async event => {\n      event.preventDefault();\n\n      let new_info = { \n        name: this.state.name,\n        description: this.state.description,\n        address: this.state.address,\n        imageUrl: this.state.imageUrl,\n        id: this.state.id\n      };\n      if (new_info.imageUrl === \"\") { \n        delete new_info.imageUrl; \n      }\n      try {\n        let campus = await this.props.editCampus(new_info)\n        console.log(campus.id); // Will catch this error if editCampus failed. \n        alert(`${new_info.name}'s edit was saved.`); // Tell user\n        // Update state, and trigger redirect to show the new campus\n        this.setState({\n          name: \"\", \n          address: \"\", \n          description: \"\",\n          imageUrl: \"\",\n          redirect: true, \n          id: -1\n        });\n      }\n      catch(err) {  \n        console.error(err); \n        alert(\"Error with edit! Please follow the Campus Information guidelines found below\");\n        this.setState({\n          errorCaught: true \n        });\n      }\n\n  }\n   \n  componentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n  }\n  \n  render() {\n    if(this.state.redirect) {\n      window.location.reload(); \n    }\n\n    return (\n      <div>\n        <EditCampusView\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}\n          campus={this.props.campus}  \n        />\n        {this.state.errorCaught ? (\n          <div>\n            <br />\n            <p>Campus name:Cannot be null.</p>\n            <p>Campus address: Cannot be null.</p>\n            <p>Campus Image: Should be a valid image link, or can be left blank.</p>\n            <p>Campus Description: No restraints, and can be null.</p>\n          </div>\n        ) : (\n          null\n        )}\n      </div>          \n    );\n  }\n}\n\nconst mapDispatch = (dispatch) => {\n    return({\n        editCampus: (campus) => dispatch(editCampusThunk(campus)),\n    })\n}\n\n\nexport default connect(null, mapDispatch)(EditCampusContainer);\n\n       \n\n\n\n\n\n\n        "]},"metadata":{},"sourceType":"module"}