{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n        imageUrl: this.state.imageUrl\n      };\n\n      if (student.imageUrl === \"\") {\n        delete student.imageUrl;\n      } // Add new student in back-end database\n\n\n      await this.props.addStudent(student).then(newStudent => {\n        console.log(newStudent); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          campusId: null,\n          redirect: true,\n          gpa: this.state.gpa,\n          imageUrl: \"\",\n          redirectId: newStudent.id\n        });\n      }).catch(err => {\n        // If errors doing the above, then: \n        console.error(err); // Output error and give alert to new information at bottom of page\n\n        alert(\"Error with add! Please follow the Student Information guidelines found at the bottom of the page\");\n        this.setState({\n          errorCaught: true // Tell react to render new thing\n\n        });\n      });\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      campusId: null,\n      redirect: false,\n      imageUrl: \"\",\n      gpa: null,\n      errorCaught: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), this.state.errorCaught ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student First and Last names: Cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student's Campus ID: Must be a valid  and actual campus ID of a school within this database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student Email: Must contain @ symbol, and be in standard email format, cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student Image: Should be a valid image link, or can be left blank.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student GPA: Must be between 0.0 and 4.0.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","email","campusId","gpa","imageUrl","addStudent","then","newStudent","console","log","redirect","redirectId","id","catch","err","error","alert","errorCaught","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\",\r\n      email: \"\",\r\n      campusId: null, \r\n      redirect: false, \r\n      imageUrl: \"\",\r\n      gpa: null,\r\n      errorCaught: false,\r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n        firstname: this.state.firstname,\r\n        lastname: this.state.lastname,\r\n        email: this.state.email,\r\n        campusId: this.state.campusId,\r\n        gpa: this.state.gpa,\r\n        imageUrl: this.state.imageUrl,\r\n    };\r\n    if (student.imageUrl === \"\") { \r\n      delete student.imageUrl; \r\n    }\r\n\r\n\r\n    // Add new student in back-end database\r\n    await this.props.addStudent(student)\r\n      .then(newStudent => {\r\n        console.log(newStudent);\r\n    // Update state, and trigger redirect to show the new student\r\n      this.setState({\r\n        firstname: \"\", \r\n        lastname: \"\",\r\n        email: \"\",\r\n        campusId: null, \r\n        redirect: true, \r\n        gpa: this.state.gpa,\r\n        imageUrl: \"\",\r\n        redirectId: newStudent.id\r\n      });\r\n    })\r\n    .catch(err => { // If errors doing the above, then: \r\n      console.error(err); // Output error and give alert to new information at bottom of page\r\n      alert(\"Error with add! Please follow the Student Information guidelines found at the bottom of the page\");\r\n      this.setState({\r\n        errorCaught: true // Tell react to render new thing\r\n      });\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n        {this.state.errorCaught ? (\r\n          <div>\r\n            <br />\r\n            <p>Student First and Last names: Cannot be null.</p>\r\n            <p>Student's Campus ID: Must be a valid  and actual campus ID of a school within this database.</p>\r\n            <p>Student Email: Must contain @ symbol, and be in standard email format, cannot be null.</p>\r\n            <p>Student Image: Should be a valid image link, or can be left blank.</p>\r\n            <p>Student GPA: Must be between 0.0 and 4.0.</p>\r\n          </div>\r\n        ) : (\r\n          null\r\n        )}\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}