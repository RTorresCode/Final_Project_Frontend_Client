{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let contSubmit = false;\n      let formCampusId = this.state.campusId;\n\n      if (!formCampusId) {\n        contSubmit = true;\n        formCampusId = null;\n      }\n\n      if (!contSubmit) {\n        for (let i of this.props.allCampuses) {\n          if (i.id === this.state.campusId) {\n            contSubmit = true;\n            break;\n          }\n        }\n      }\n\n      if (!contSubmit) {\n        this.setState({\n          errorMsg: \"Invalid Campus ID: Campus does not exist\"\n        });\n      } else {\n        let student = {\n          firstname: this.state.firstname,\n          lastname: this.state.lastname,\n          campusId: formCampusId,\n          email: this.state.email,\n          imageUrl: this.state.imageUrl,\n          gpa: this.state.gpa\n        }; // Add new student in back-end database\n\n        let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          campusId: null,\n          email: \"\",\n          redirect: true,\n          redirectId: newStudent.id\n        });\n      }\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      campusId: null,\n      redirect: false,\n      imageUrl: \"\",\n      gpa: null,\n      errorMsg: null,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/students/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        errorMsg: this.state.errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student)),\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk())\n  };\n};\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","fetchAllCampusesThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","contSubmit","formCampusId","state","campusId","i","allCampuses","id","errorMsg","student","firstname","lastname","email","imageUrl","gpa","newStudent","addStudent","redirect","redirectId","componentDidMount","fetchAllCampuses","componentWillUnmount","render","mapDispatch","dispatch","mapState"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\n\r\nclass NewStudentContainer extends Component {\r\n    // Initialize state\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            email: \"\",\r\n            campusId: null,\r\n            redirect: false,\r\n            imageUrl: \"\",\r\n            gpa: null,\r\n            errorMsg: null,\r\n            redirectId: null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllCampuses();\r\n    }\r\n\r\n    // Capture input data when it is entered\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n        let contSubmit = false;\r\n        let formCampusId = this.state.campusId;\r\n\r\n        if (!formCampusId) {\r\n            contSubmit = true;\r\n            formCampusId = null;\r\n        }\r\n\r\n        if (!contSubmit) {\r\n            for (let i of this.props.allCampuses) {\r\n                if (i.id === this.state.campusId) {\r\n                    contSubmit = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!contSubmit) {\r\n            this.setState({\r\n                errorMsg: \"Invalid Campus ID: Campus does not exist\"\r\n            });\r\n        }\r\n        else {\r\n            let student = {\r\n                firstname: this.state.firstname,\r\n                lastname: this.state.lastname,\r\n                campusId: formCampusId,\r\n                email: this.state.email,\r\n                imageUrl: this.state.imageUrl,\r\n                gpa: this.state.gpa\r\n            };\r\n\r\n            // Add new student in back-end database\r\n            let newStudent = await this.props.addStudent(student);\r\n\r\n            // Update state, and trigger redirect to show the new student\r\n            this.setState({\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n                campusId: null,\r\n                email: \"\",\r\n                redirect: true,\r\n                redirectId: newStudent.id\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    // Unmount when the component is being removed from the DOM:\r\n    componentWillUnmount() {\r\n        this.setState({ redirect: false, redirectId: null });\r\n    }\r\n\r\n    // Render new student input form\r\n    render() {\r\n        // Redirect to new student's page after submit\r\n        if (this.state.redirect) {\r\n            return (<Redirect to={`/students/${this.state.redirectId}`} />)\r\n        }\r\n\r\n        // Display the input form via the corresponding View component\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <NewStudentView\r\n                    handleChange={this.handleChange}\r\n                    handleSubmit={this.handleSubmit}\r\n                    errorMsg={this.state.errorMsg}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return ({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n        fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    })\r\n}\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n    };\r\n};\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(NewStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}