{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Redirect } from 'react-router-dom';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk //deleteStudentThunk,\n} from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  constructor(props) {\n    //initialize state\n    super(props);\n\n    this.handleDelete = async campusId => {\n      await this.props.deleteCampus(campusId);\n      this.setState({\n        studRedirect: true\n      });\n    };\n\n    this.state = {\n      studRedirect: false\n    };\n  } // Get the specific campus data from back-end database\n\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id); //this.props.fetchAllStudents(); \n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return this.state.studRedirect ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/campuses`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 39\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        handleDelete: this.handleDelete,\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","Redirect","React","Component","connect","fetchCampusThunk","deleteCampusThunk","CampusView","CampusContainer","constructor","props","handleDelete","campusId","deleteCampus","setState","studRedirect","state","componentDidMount","fetchCampus","match","params","id","render","campus","mapState","mapDispatch","dispatch"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Redirect } from 'react-router-dom'\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    fetchCampusThunk,\r\n    deleteCampusThunk,\r\n    //deleteStudentThunk,\r\n} from \"../../store/thunks\";\r\n\r\nimport { CampusView } from \"../views\";\r\n\r\nclass CampusContainer extends Component {\r\n    constructor(props) { //initialize state\r\n        super(props);\r\n        this.state = {\r\n            studRedirect: false,\r\n        }\r\n    }\r\n    // Get the specific campus data from back-end database\r\n    componentDidMount() {\r\n        // Get campus ID from URL (API link)\r\n        this.props.fetchCampus(this.props.match.params.id);\r\n        //this.props.fetchAllStudents(); \r\n    }\r\n    handleDelete = async campusId => {\r\n        await this.props.deleteCampus(campusId);\r\n        this.setState({\r\n            studRedirect: true\r\n        })\r\n    }\r\n\r\n    // Render a Campus view by passing campus data as props to the corresponding View component\r\n    render() {\r\n        return (\r\n            this.state.studRedirect ? <Redirect to={`/campuses`} /> :\r\n                <div>\r\n                    <Header />\r\n                    <CampusView handleDelete={this.handleDelete} campus={this.props.campus} />\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n    return {\r\n        campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n    };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return {\r\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n        deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\r\n    };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACIC,gBADJ,EAEIC,iBAFJ,CAGI;AAHJ,OAIO,oBAJP;AAMA,SAASC,UAAT,QAA2B,UAA3B;;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;EACpCM,WAAW,CAACC,KAAD,EAAQ;IAAE;IACjB,MAAMA,KAAN;;IADe,KAYnBC,YAZmB,GAYJ,MAAMC,QAAN,IAAkB;MAC7B,MAAM,KAAKF,KAAL,CAAWG,YAAX,CAAwBD,QAAxB,CAAN;MACA,KAAKE,QAAL,CAAc;QACVC,YAAY,EAAE;MADJ,CAAd;IAGH,CAjBkB;;IAEf,KAAKC,KAAL,GAAa;MACTD,YAAY,EAAE;IADL,CAAb;EAGH,CANmC,CAOpC;;;EACAE,iBAAiB,GAAG;IAChB;IACA,KAAKP,KAAL,CAAWQ,WAAX,CAAuB,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C,EAFgB,CAGhB;EACH;;EAQD;EACAC,MAAM,GAAG;IACL,OACI,KAAKN,KAAL,CAAWD,YAAX,gBAA0B,QAAC,QAAD;MAAU,EAAE,EAAG;IAAf;MAAA;MAAA;MAAA;IAAA,QAA1B,gBACI;MAAA,wBACI,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,UAAD;QAAY,YAAY,EAAE,KAAKJ,YAA/B;QAA6C,MAAM,EAAE,KAAKD,KAAL,CAAWa;MAAhE;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFR;EAOH;;AA7BmC,C,CAgCxC;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIR,KAAD,IAAW;EACxB,OAAO;IACHO,MAAM,EAAEP,KAAK,CAACO,MADX,CACoB;;EADpB,CAAP;AAGH,CAJD,C,CAKA;AACA;;;AACA,MAAME,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO;IACHR,WAAW,EAAGG,EAAD,IAAQK,QAAQ,CAACrB,gBAAgB,CAACgB,EAAD,CAAjB,CAD1B;IAEHR,YAAY,EAAGD,QAAD,IAAcc,QAAQ,CAACpB,iBAAiB,CAACM,QAAD,CAAlB;EAFjC,CAAP;AAIH,CALD,C,CAOA;AACA;AACA;;;AACA,eAAeR,OAAO,CAACoB,QAAD,EAAWC,WAAX,CAAP,CAA+BjB,eAA/B,CAAf"},"metadata":{},"sourceType":"module"}