{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\AllStudentsContainer.js\";\n\n/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllStudentsThunk, deleteStudentThunk } from '../../store/thunks';\nimport AllStudentsView from '../views/AllStudentsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllStudentsContainer extends Component {\n  // Get all students data from back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents();\n    window.scrollTo(0, 0);\n  } // Render All Students view by passing all students data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AllStudentsView, {\n        students: this.props.allStudents,\n        deleteStudent: this.props.deleteStudent,\n        editStudent: this.props.editStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\n\n\nconst mapState = state => {\n  return {\n    allStudents: state.allStudents // Get the State object from Reducer \"allStudents\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId))\n  };\n}; // Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["Header","Component","connect","withRouter","fetchAllStudentsThunk","deleteStudentThunk","AllStudentsView","AllStudentsContainer","componentDidMount","props","fetchAllStudents","window","scrollTo","render","allStudents","deleteStudent","editStudent","mapState","state","mapDispatch","dispatch","studentId"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport {\r\n    fetchAllStudentsThunk,\r\n    deleteStudentThunk\r\n} from '../../store/thunks';\r\n\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nclass AllStudentsContainer extends Component {\r\n    // Get all students data from back-end database\r\n    componentDidMount() {\r\n        this.props.fetchAllStudents();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n\r\n    // Render All Students view by passing all students data as props to the corresponding View component\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <AllStudentsView\r\n                    students={this.props.allStudents}\r\n                    deleteStudent={this.props.deleteStudent}\r\n                    editStudent={this.props.editStudent}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\r\nconst mapState = (state) => {\r\n    return {\r\n        allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\r\n    };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return {\r\n        fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\r\n        deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n    };\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SACIC,qBADJ,EAEIC,kBAFJ,QAGO,oBAHP;AAKA,OAAOC,eAAP,MAA4B,0BAA5B;;;AAEA,MAAMC,oBAAN,SAAmCN,SAAnC,CAA6C;EACzC;EACAO,iBAAiB,GAAG;IAChB,KAAKC,KAAL,CAAWC,gBAAX;IACAC,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;EACH,CALwC,CAQzC;;;EACAC,MAAM,GAAG;IACL,oBACI;MAAA,wBACI,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,eAAD;QACI,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,WADzB;QAEI,aAAa,EAAE,KAAKL,KAAL,CAAWM,aAF9B;QAGI,WAAW,EAAE,KAAKN,KAAL,CAAWO;MAH5B;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAUH;;AApBwC,C,CAuB7C;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EACxB,OAAO;IACHJ,WAAW,EAAEI,KAAK,CAACJ,WADhB,CAC8B;;EAD9B,CAAP;AAGH,CAJD,C,CAKA;AACA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO;IACHV,gBAAgB,EAAE,MAAMU,QAAQ,CAAChB,qBAAqB,EAAtB,CAD7B;IAEHW,aAAa,EAAGM,SAAD,IAAeD,QAAQ,CAACf,kBAAkB,CAACgB,SAAD,CAAnB;EAFnC,CAAP;AAIH,CALD,C,CAOA;AACA;AACA;;;AACA,eAAelB,UAAU,CAACD,OAAO,CAACe,QAAD,EAAWE,WAAX,CAAP,CAA+BZ,oBAA/B,CAAD,CAAzB"},"metadata":{},"sourceType":"module"}