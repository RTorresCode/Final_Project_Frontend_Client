{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk //deleteStudentThunk,\n} from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { EditCampusContainer } from \"./index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  constructor(props) {\n    //initialize state\n    super(props);\n\n    this.toggleEdit = () => {\n      let new_editor = !this.state.editor;\n      this.setState({\n        editor: new_editor // Function to switch editing on and off\n\n      });\n    };\n\n    this.state = {\n      editor: false\n    };\n  } // Get the specific campus data from back-end database\n\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id); //this.props.fetchAllStudents(); \n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        toggleEdit: this.toggleEdit,\n        editing: this.state.editor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), this.state.editor ? /*#__PURE__*/_jsxDEV(EditCampusContainer, {\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : null // do nothing\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: id => dispatch(deleteCampusThunk(id)),\n    deleteStudent: id => dispatch(deleteStudentThunk(id))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","CampusView","EditCampusContainer","CampusContainer","constructor","props","toggleEdit","new_editor","state","editor","setState","componentDidMount","fetchCampus","match","params","id","render","campus","deleteCampus","mapState","mapDispatch","dispatch","deleteStudent","deleteStudentThunk"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk,\r\n         deleteCampusThunk,\r\n         //deleteStudentThunk,\r\n        } from \"../../store/thunks\";\r\n\r\nimport { CampusView } from \"../views\";\r\nimport { EditCampusContainer } from \"./index\";\r\n\r\nclass CampusContainer extends Component {\r\n  constructor(props) { //initialize state\r\n    super(props); \r\n    this.state = {\r\n        editor: false,\r\n    }\r\n  }\r\n  // Get the specific campus data from back-end database\r\n  componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n    //this.props.fetchAllStudents(); \r\n  }\r\n\r\n  toggleEdit = () => {\r\n    let new_editor = !this.state.editor;\r\n    this.setState({\r\n      editor: new_editor // Function to switch editing on and off\r\n    });\r\n  }\r\n  // Render a Campus view by passing campus data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <CampusView \r\n        campus={this.props.campus} \r\n        deleteCampus={this.props.deleteCampus}\r\n        toggleEdit={this.toggleEdit}\r\n        editing={this.state.editor} \r\n      \r\n        />\r\n        {this.state.editor ? (\r\n          <EditCampusContainer campus={this.props.campus}/>\r\n        ) : (\r\n          null // do nothing\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\r\n    deleteStudent: (id) => dispatch(deleteStudentThunk(id))\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EACSC,iBADT,CAES;AAFT,OAGe,oBAHf;AAKA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,mBAAT,QAAoC,SAApC;;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;EACtCO,WAAW,CAACC,KAAD,EAAQ;IAAE;IACnB,MAAMA,KAAN;;IADiB,KAanBC,UAbmB,GAaN,MAAM;MACjB,IAAIC,UAAU,GAAG,CAAC,KAAKC,KAAL,CAAWC,MAA7B;MACA,KAAKC,QAAL,CAAc;QACZD,MAAM,EAAEF,UADI,CACO;;MADP,CAAd;IAGD,CAlBkB;;IAEjB,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE;IADC,CAAb;EAGD,CANqC,CAOtC;;;EACAE,iBAAiB,GAAG;IAClB;IACA,KAAKN,KAAL,CAAWO,WAAX,CAAuB,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C,EAFkB,CAGlB;EACD;;EAQD;EACAC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,UAAD;QACA,MAAM,EAAE,KAAKX,KAAL,CAAWY,MADnB;QAEA,YAAY,EAAE,KAAKZ,KAAL,CAAWa,YAFzB;QAGA,UAAU,EAAE,KAAKZ,UAHjB;QAIA,OAAO,EAAE,KAAKE,KAAL,CAAWC;MAJpB;QAAA;QAAA;QAAA;MAAA,QAFF,EASG,KAAKD,KAAL,CAAWC,MAAX,gBACC,QAAC,mBAAD;QAAqB,MAAM,EAAE,KAAKJ,KAAL,CAAWY;MAAxC;QAAA;QAAA;QAAA;MAAA,QADD,GAGC,IAHD,CAGM;MAZT;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAiBD;;AAvCqC,C,CA0CxC;AACA;AACA;;;AACA,MAAME,QAAQ,GAAIX,KAAD,IAAW;EAC1B,OAAO;IACLS,MAAM,EAAET,KAAK,CAACS,MADT,CACkB;;EADlB,CAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMG,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLT,WAAW,EAAGG,EAAD,IAAQM,QAAQ,CAACtB,gBAAgB,CAACgB,EAAD,CAAjB,CADxB;IAELG,YAAY,EAAGH,EAAD,IAAQM,QAAQ,CAACrB,iBAAiB,CAACe,EAAD,CAAlB,CAFzB;IAGLO,aAAa,EAAGP,EAAD,IAAQM,QAAQ,CAACE,kBAAkB,CAACR,EAAD,CAAnB;EAH1B,CAAP;AAKD,CAND,C,CAQA;AACA;AACA;;;AACA,eAAejB,OAAO,CAACqB,QAAD,EAAWC,WAAX,CAAP,CAA+BjB,eAA/B,CAAf"},"metadata":{},"sourceType":"module"}