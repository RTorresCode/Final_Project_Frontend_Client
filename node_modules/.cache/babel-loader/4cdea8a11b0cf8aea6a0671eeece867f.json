{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/EditStudentContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk } from '../../store/thunks';\nimport { fetchStudentThunk } from \"../../store/thunks\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // componentDidMount() {\n  //   this.props.fetchStudent(this.props.match.params.id);\n  //   this.props.fetchAllCampuses();\n  // }\n  constructor(props) {\n    super(props);\n\n    this.handleInit = async studentId => {\n      await this.props.fetchStudent(studentId);\n      this.setState({\n        firstname: this.props.student.firstname,\n        lastname: this.props.student.lastname,\n        campusId: this.props.student.campusId,\n        email: this.props.student.email,\n        imageUrl: this.props.student.imageUrl,\n        gpa: this.props.student.gpa,\n        redirectId: this.props.student.id\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n\n      if (!this.props.allCampuses.map(({\n        id\n      }) => id).includes(parseInt(this.state.campusId))) {\n        alert(\"Please enter a valid campusId.\");\n        this.setState({\n          redirect: false\n        });\n      } else {\n        let student = this.state.student;\n        student.firstname = this.state.firstname;\n        student.lastname = this.state.lastname;\n        student.campusId = this.state.campusId;\n        student.imageURL = this.state.imageURL;\n        student.gpa = this.state.gpa;\n        student.email = this.state.email;\n        await this.props.editStudent(student);\n        this.setState({\n          firstname: '',\n          lastname: '',\n          campusId: '',\n          email: '',\n          imageURL: '',\n          gpa: '',\n          redirect: true\n        });\n      }\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      email: \"\",\n      imageUrl: null,\n      gpa: null,\n      redirect: false,\n      redirectId: null,\n      errorMsg: null\n    };\n  }\n\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchAllCampuses();\n    this.handleInit(this.props.match.params.id);\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.props.match.params.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        allCampuses: this.props.allCampuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    student: state.student,\n    allCampuses: state.allCampuses\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student)),\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk())\n  };\n};\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","editStudentThunk","fetchStudentThunk","fetchAllCampusesThunk","EditStudentContainer","constructor","props","handleInit","studentId","fetchStudent","setState","firstname","student","lastname","campusId","email","imageUrl","gpa","redirectId","id","handleChange","event","target","name","value","handleSubmit","preventDefault","allCampuses","map","includes","parseInt","state","alert","redirect","imageURL","editStudent","errorMsg","componentDidMount","fetchAllCampuses","match","params","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["import Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk } from '../../store/thunks';\nimport { fetchStudentThunk } from \"../../store/thunks\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\n\n\nclass EditStudentContainer extends Component {\n  // componentDidMount() {\n    \n  //   this.props.fetchStudent(this.props.match.params.id);\n  //   this.props.fetchAllCampuses();\n  // }\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null,\n      email: \"\",\n      imageUrl: null,\n      gpa: null,\n      redirect: false, \n      redirectId: null,\n      errorMsg: null\n    };\n  }\n\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchAllCampuses();\n    this.handleInit(this.props.match.params.id);\n  }\n\n  handleInit = async studentId => {\n    await this.props.fetchStudent(studentId);\n    this.setState({\n        firstname: this.props.student.firstname,\n        lastname: this.props.student.lastname, \n        campusId: this.props.student.campusId,\n        email: this.props.student.email,\n        imageUrl: this.props.student.imageUrl,\n        gpa: this.props.student.gpa,\n        redirectId: this.props.student.id\n    });\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    \n    \n    \n    \n    \n  \n\n\n\n\n\n\n    if(!(this.props.allCampuses.map(({id}) => id)).includes(parseInt(this.state.campusId))){\n      alert(\"Please enter a valid campusId.\")\n      this.setState({\n        redirect: false\n      })\n    } \n    else{\n      let student = this.state.student\n      student.firstname = this.state.firstname\n      student.lastname = this.state.lastname\n      student.campusId = this.state.campusId\n      student.imageURL = this.state.imageURL\n      student.gpa = this.state.gpa\n      student.email = this.state.email\n \n      await this.props.editStudent(student);\n\n      this.setState({\n        firstname: '', \n        lastname: '', \n        campusId: '', \n        email: '',\n        imageURL: '',\n        gpa: '',\n        redirect: true\n      });\n    }\n  }\n  render() {\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.props.match.params.id}`}/>)\n    }\n    return (\n      <div>\n        <Header />\n        <EditStudentView student={this.props.student} \n        handleChange = {this.handleChange} \n        handleSubmit={this.handleSubmit}\n        allCampuses={this.props.allCampuses}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapState = (state) => {\n  return {\n    student: state.student,\n    allCampuses: state.allCampuses,  \n  };\n};\n    \nconst mapDispatch = (dispatch) => {\n  return {\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n    editStudent: (student) => dispatch(editStudentThunk(student)),\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n  };\n};\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);    "]},"metadata":{},"sourceType":"module"}