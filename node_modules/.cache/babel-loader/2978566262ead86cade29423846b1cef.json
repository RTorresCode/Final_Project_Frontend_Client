{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\NewCampusContainer.js\";\n\n/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl\n      }; // if (campus.imageUrl === \"\") { \n      //     delete campus.imageUrl; \n      // }\n      // Add new campus in back-end database\n\n      let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new student\n\n      this.setState({\n        name: \"\",\n        description: \"\",\n        address: \"\",\n        redirect: true,\n        redirectId: newCampus.id\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      redirect: false,\n      redirectId: null,\n      imageUrl: \"\"\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campuses/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","imageUrl","newCampus","addCampus","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/NewCampusContainer.js"],"sourcesContent":["/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\n\r\nclass NewCampusContainer extends Component {\r\n    // Initialize state\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            address: \"\",\r\n            description: \"\",\r\n            redirect: false,\r\n            redirectId: null,\r\n            imageUrl: \"\",\r\n\r\n        };\r\n    }\r\n\r\n    // Capture input data when it is entered\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n        let campus = {\r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            description: this.state.description,\r\n            imageUrl: this.state.imageUrl,\r\n        };\r\n        // if (campus.imageUrl === \"\") { \r\n        //     delete campus.imageUrl; \r\n        // }\r\n\r\n        // Add new campus in back-end database\r\n        let newCampus = await this.props.addCampus(campus);\r\n\r\n        // Update state, and trigger redirect to show the new student\r\n        this.setState({\r\n            name: \"\",\r\n            description: \"\",\r\n            address: \"\",\r\n            redirect: true,\r\n            redirectId: newCampus.id\r\n        });\r\n    }\r\n\r\n    // Unmount when the component is being removed from the DOM:\r\n    componentWillUnmount() {\r\n        this.setState({ redirect: false, redirectId: null });\r\n    }\r\n\r\n    // Render new student input form\r\n    render() {\r\n        // Redirect to new student's page after submit\r\n        if (this.state.redirect) {\r\n            return (<Redirect to={`/campuses/${this.state.redirectId}`} />)\r\n        }\r\n\r\n        // Display the input form via the corresponding View component\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <NewCampusView\r\n                    handleChange={this.handleChange}\r\n                    handleSubmit={this.handleSubmit}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return ({\r\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;;;AAEA,MAAMC,kBAAN,SAAiCL,SAAjC,CAA2C;EACvC;EACAM,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;;IADe,KAcnBC,YAdmB,GAcJC,KAAK,IAAI;MACpB,KAAKC,QAAL,CAAc;QACV,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;MADxB,CAAd;IAGH,CAlBkB;;IAAA,KAqBnBC,YArBmB,GAqBJ,MAAML,KAAN,IAAe;MAC1BA,KAAK,CAACM,cAAN,GAD0B,CACD;;MAEzB,IAAIC,MAAM,GAAG;QACTJ,IAAI,EAAE,KAAKK,KAAL,CAAWL,IADR;QAETM,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAFX;QAGTC,WAAW,EAAE,KAAKF,KAAL,CAAWE,WAHf;QAITC,QAAQ,EAAE,KAAKH,KAAL,CAAWG;MAJZ,CAAb,CAH0B,CAS1B;MACA;MACA;MAEA;;MACA,IAAIC,SAAS,GAAG,MAAM,KAAKd,KAAL,CAAWe,SAAX,CAAqBN,MAArB,CAAtB,CAd0B,CAgB1B;;MACA,KAAKN,QAAL,CAAc;QACVE,IAAI,EAAE,EADI;QAEVO,WAAW,EAAE,EAFH;QAGVD,OAAO,EAAE,EAHC;QAIVK,QAAQ,EAAE,IAJA;QAKVC,UAAU,EAAEH,SAAS,CAACI;MALZ,CAAd;IAOH,CA7CkB;;IAEf,KAAKR,KAAL,GAAa;MACTL,IAAI,EAAE,EADG;MAETM,OAAO,EAAE,EAFA;MAGTC,WAAW,EAAE,EAHJ;MAITI,QAAQ,EAAE,KAJD;MAKTC,UAAU,EAAE,IALH;MAMTJ,QAAQ,EAAE;IAND,CAAb;EASH,CAbsC,CAevC;;;EAkCA;EACAM,oBAAoB,GAAG;IACnB,KAAKhB,QAAL,CAAc;MAAEa,QAAQ,EAAE,KAAZ;MAAmBC,UAAU,EAAE;IAA/B,CAAd;EACH,CApDsC,CAsDvC;;;EACAG,MAAM,GAAG;IACL;IACA,IAAI,KAAKV,KAAL,CAAWM,QAAf,EAAyB;MACrB,oBAAQ,QAAC,QAAD;QAAU,EAAE,EAAG,aAAY,KAAKN,KAAL,CAAWO,UAAW;MAAjD;QAAA;QAAA;QAAA;MAAA,QAAR;IACH,CAJI,CAML;;;IACA,oBACI;MAAA,wBACI,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,aAAD;QACI,YAAY,EAAE,KAAKhB,YADvB;QAEI,YAAY,EAAE,KAAKM;MAFvB;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EASH;;AAvEsC,C,CA0E3C;AACA;AACA;;;AACA,MAAMc,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAQ;IACJP,SAAS,EAAGN,MAAD,IAAYa,QAAQ,CAACzB,cAAc,CAACY,MAAD,CAAf;EAD3B,CAAR;AAGH,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAef,OAAO,CAAC,IAAD,EAAO2B,WAAP,CAAP,CAA2BvB,kBAA3B,CAAf"},"metadata":{},"sourceType":"module"}