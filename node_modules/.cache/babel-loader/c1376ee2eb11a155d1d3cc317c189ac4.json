{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/NewStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let contSubmit = false;\n      let formCampusId = this.state.campusId;\n\n      if (!formCampusId) {\n        contSubmit = true;\n        formCampusId = null;\n      }\n\n      if (!contSubmit) {\n        for (let i of this.props.allCampuses) {\n          if (i.id == this.state.campusId) {\n            contSubmit = true;\n            break;\n          }\n        }\n      }\n\n      if (!contSubmit) {\n        this.setState({\n          errorMsg: \"Invalid Campus ID: Campus does not exist\"\n        });\n      } else {\n        let student = {\n          firstname: this.state.firstname,\n          lastname: this.state.lastname,\n          campusId: formCampusId,\n          email: this.state.email,\n          imageUrl: this.state.imageUrl,\n          gpa: this.state.gpa\n        }; // Add new student in back-end database\n\n        let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          campusId: null,\n          email: \"\",\n          redirect: true,\n          redirectId: newStudent.id\n        });\n      }\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      campusId: null,\n      redirect: false,\n      imageUrl: \"\",\n      gpa: null,\n      errorMsg: null,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), this.state.errorCaught ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student First and Last names: Cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student's Campus ID: Must be a valid  and actual campus ID of a school within this database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student Email: Must contain @ symbol, and be in standard email format, cannot be null.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student Image: Should be a valid image link, or can be left blank.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Student GPA: Must be between 0.0 and 4.0.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/NewStudentContainer.js"],"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","fetchAllCampusesThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","contSubmit","formCampusId","state","campusId","i","allCampuses","id","errorMsg","student","firstname","lastname","email","imageUrl","gpa","newStudent","addStudent","redirect","redirectId","componentDidMount","fetchAllCampuses","componentWillUnmount","render","errorCaught","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      email: \"\",\n      campusId: null, \n      redirect: false, \n      imageUrl: \"\",\n      gpa: null,\n      errorMsg: null,\n      redirectId: null\n    };\n  }\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let contSubmit = false;\n    let formCampusId = this.state.campusId;\n\n    if(!formCampusId) {\n      contSubmit = true;\n      formCampusId = null;\n  }\n\n    if(!contSubmit) {\n      for(let i of this.props.allCampuses) {\n        if(i.id == this.state.campusId) {\n          contSubmit = true;\n          break;\n        }\n      }\n    }\n    if(!contSubmit) {\n      this.setState({\n        errorMsg: \"Invalid Campus ID: Campus does not exist\"\n      });\n    }\n    else {\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: formCampusId,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa\n      };\n\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\", \n        lastname: \"\", \n        campusId: null,\n        email: \"\",\n        redirect: true, \n        redirectId: newStudent.id\n      });\n    }\n  }\n    \n\n\n\n\n\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n        {this.state.errorCaught ? (\n          <div>\n            <br />\n            <p>Student First and Last names: Cannot be null.</p>\n            <p>Student's Campus ID: Must be a valid  and actual campus ID of a school within this database.</p>\n            <p>Student Email: Must contain @ symbol, and be in standard email format, cannot be null.</p>\n            <p>Student Image: Should be a valid image link, or can be left blank.</p>\n            <p>Student GPA: Must be between 0.0 and 4.0.</p>\n          </div>\n        ) : (\n          null\n        )}\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"]},"metadata":{},"sourceType":"module"}