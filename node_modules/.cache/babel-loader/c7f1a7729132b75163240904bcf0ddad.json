{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RT3\\\\Documents\\\\Projects\\\\Web Development\\\\Final Project (Frontend)\\\\src\\\\components\\\\containers\\\\AllCampusesContainer.js\";\n\n/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { deleteCampus } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllCampusesContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleEdit = () => {\n      // Function for editing on and off\n      let new_editor = !this.state.editor;\n      this.setState({\n        editor: new_editor\n      });\n    };\n\n    this.state = {\n      editor: false\n    };\n  } // Get all campuses data from back-end database\n\n\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus,\n        toggleEdit: this.toggleEdit,\n        editing: this.state.editor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n}; // Type check props;\n\n\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n}; // Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"sources":["C:/Users/RT3/Documents/Projects/Web Development/Final Project (Frontend)/src/components/containers/AllCampusesContainer.js"],"names":["Header","Component","PropTypes","connect","fetchAllCampusesThunk","deleteCampusThunk","AllCampusesView","deleteCampus","AllCampusesContainer","constructor","props","toggleEdit","new_editor","state","editor","setState","componentDidMount","fetchAllCampuses","render","allCampuses","mapState","mapDispatch","dispatch","campusId","propTypes","array","isRequired","func"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,oBAAzD;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,YAAT,QAA6B,oCAA7B;;;AAEA,MAAMC,oBAAN,SAAmCP,SAAnC,CAA6C;AAC3CQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,UAXmB,GAWN,MAAM;AAAE;AACnB,UAAIC,UAAU,GAAG,CAAC,KAAKC,KAAL,CAAWC,MAA7B;AACA,WAAKC,QAAL,CAAc;AACZD,QAAAA,MAAM,EAAEF;AADI,OAAd;AAGD,KAhBkB;;AAEjB,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGD,GAN0C,CAO3C;;;AACAE,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,KAAL,CAAWO,gBAAX;AACD;;AAUD;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AACE,QAAA,WAAW,EAAE,KAAKR,KAAL,CAAWS,WAD1B;AAEE,QAAA,YAAY,EAAE,KAAKT,KAAL,CAAWH,YAF3B;AAGE,QAAA,UAAU,EAAE,KAAKI,UAHnB;AAIE,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC;AAJtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAjC0C,C,CAoC7C;AACA;AACA;;;AACA,MAAMM,QAAQ,GAAIP,KAAD,IAAW;AAC1B,SAAO;AACLM,IAAAA,WAAW,EAAEN,KAAK,CAACM,WADd,CAC4B;;AAD5B,GAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAME,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLL,IAAAA,gBAAgB,EAAE,MAAMK,QAAQ,CAAClB,qBAAqB,EAAtB,CAD3B;AAELG,IAAAA,YAAY,EAAGgB,QAAD,IAAcD,QAAQ,CAACjB,iBAAiB,CAACkB,QAAD,CAAlB;AAF/B,GAAP;AAID,CALD,C,CAOA;;;AACAf,oBAAoB,CAACgB,SAArB,GAAiC;AAC/BL,EAAAA,WAAW,EAAEjB,SAAS,CAACuB,KAAV,CAAgBC,UADE;AAE/BT,EAAAA,gBAAgB,EAAEf,SAAS,CAACyB,IAAV,CAAeD;AAFF,CAAjC,C,CAKA;AACA;AACA;;AACA,eAAevB,OAAO,CAACiB,QAAD,EAAWC,WAAX,CAAP,CAA+Bb,oBAA/B,CAAf","sourcesContent":["/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\r\nimport { AllCampusesView } from \"../views\";\r\nimport { deleteCampus } from '../../store/actions/actionCreators';\r\n\r\nclass AllCampusesContainer extends Component {\r\n  constructor(props) { \r\n    super(props); \r\n    this.state = {\r\n        editor: false,\r\n    }\r\n  }\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  toggleEdit = () => { // Function for editing on and off\r\n    let new_editor = !this.state.editor;\r\n    this.setState({\r\n      editor: new_editor \r\n    });\r\n  }\r\n\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n          deleteCampus={this.props.deleteCampus}\r\n          toggleEdit={this.toggleEdit}\r\n          editing={this.state.editor}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);"]},"metadata":{},"sourceType":"module"}