{"ast":null,"code":"var _jsxFileName = \"/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/NewCampusContainer.js\";\n\n/*==================================================\nNewCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl\n      }; // Add new campus in back-end database\n\n      let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new campus\n\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        redirect: true,\n        redirectId: newCampus.id\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      redirect: false,\n      redirectId: null,\n      imageUrl: \"\",\n      errorCaught: false\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new campus input form\n\n\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"sources":["/Users/tahminamunni/Desktop/Final_Project_Frontend_Client/src/components/containers/NewCampusContainer.js"],"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","imageUrl","newCampus","addCampus","redirect","redirectId","id","errorCaught","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\n\nclass NewCampusContainer extends Component {\n    // Initialize state\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            address: \"\",\n            description: \"\",\n            redirect: false,\n            redirectId: null,\n            imageUrl: \"\",\n            errorCaught: false\n        };\n    }\n\n    // Capture input data when it is entered\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    // Take action after user click the submit button\n    handleSubmit = async event => {\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n        let campus = {\n            name: this.state.name,\n            address: this.state.address,\n            description: this.state.description,\n            imageUrl: this.state.imageUrl,\n        };\n\n        // Add new campus in back-end database\n        let newCampus = await this.props.addCampus(campus);\n\n        // Update state, and trigger redirect to show the new campus\n        this.setState({\n            name: \"\",\n            address: \"\",\n            description: \"\",\n            redirect: true,\n            redirectId: newCampus.id\n        });\n    }\n\n    // Unmount when the component is being removed from the DOM:\n    componentWillUnmount() {\n        this.setState({ redirect: false, redirectId: null });\n    }\n\n    // Render new campus input form\n    render() {\n        // Redirect to new campus's page after submit\n        if (this.state.redirect) {\n            return (<Redirect to={`/campus/${this.state.redirectId}`} />)\n        }\n\n        // Display the input form via the corresponding View component\n        return (\n            <div>\n                <Header />\n                <NewCampusView\n                    handleChange={this.handleChange}\n                    handleSubmit={this.handleSubmit}\n                />\n            </div>\n        );\n    }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return ({\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\n    })\n}\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);"]},"metadata":{},"sourceType":"module"}